@mixin border-radius($radius:5px) {
	-webkit-border-radius: $radius;
	-moz-border-radius: $radius;
	-ms-border-radius: $radius;
	border-radius: $radius;
}

@mixin box-shadow($x:0, $y:2px, $blur:5px, $spread:0, $color: rgba(0, 0, 0, .16)) {
	-webkit-box-shadow: $x $y $blur $spread $color;
	-moz-box-shadow: $x $y $blur $spread $color;
	box-shadow: $x $y $blur $spread $color;
}

@mixin translate3d($x, $y, $z) {
	-webkit-transform: translate3d($x, $y, $z);
	-moz-transform: translate3d($x, $y, $z);
	-o-transform: translate3d($x, $y, $z);
	transform: translate3d($x, $y, $z);
}

@mixin rotate($value: 180deg) {
	-ms-transform: rotate($value); // IE 9
	-webkit-transform: rotate($value); // Chrome, Safari, Opera
	transform: rotate($value);
}

@mixin arrow($color: #000) {
	content: '';
	display: inline-block;
	vertical-align: middle;
	margin-right: 10px;
	width: 0;
	height: 0;

	border-left: 5px solid transparent;
	border-right: 5px solid transparent;
	border-top: 5px solid $color;
}

// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline_px: 16px;

// Returns the rem value based on desired value in pixels
@mixin rem($property, $px_values) {

	// Convert the baseline into rems
	$baseline_rem: ($baseline_px / 1rem);

	// Print the first line in pixel values
	#{$property}: $px_values;

	// If there is only one (numeric) value, return the property/value line for it.
	@if type-of($px_values) == 'number' {
		#{$property}: $px_values / $baseline_rem;
	}

		// If there is more than one value, create a list and perform equations on each value
	@else {

		// Create an empty list that we can dump values into
		$rem_values: ();

		@each $value in $px_values {

			// If the value is zero, return 0
			@if $value == 0 {
				$rem_values: append($rem_values, $value);
			}

				// If the value is not zero, convert it from px to rem
			@else {
				$rem_values: append($rem_values, ($value / $baseline_rem) );
			}
		}

		// Return the property and its list of converted values
		#{$property}: $rem_values;
	}
}

@mixin inline-form-grip($width) {
	@extend .form-group;
	margin: 0 5px 15px 5px;
	.field-content {
		width: $width;
		.input {
			width: 100%;
		}
	}
}

@mixin switch($wh, $off, $on, $ball){
	position: relative;
	display: inline-block;
	> input {
		display: none;
		&:checked + label {}
		&:checked + label:before{ background-color:$off;}
		&:checked + label:after{left: $wh/2;}
	}
	> label {
		display: block;
		width: $wh;
		height: $wh/2;
		clip: rect(0 0 0 0);
		color: transparent;
		user-select: none;
		&:before,
		&:after{
			content: "";
			display: block;
			position: absolute;
			cursor: pointer;
			transition: all .2s ease-out;
		}
		&:before{
			width: 100%;
			height: 100%;
			color: #888;
			background-color: $on;
			border-radius: 9999em;
		}
		&:after {
			top: 0;
			left: 0;
			width: $wh/2;
			height:$wh/2;
			border-radius: 50%;
			background-color: $ball;
			box-shadow: 0 0 2px 0 rgba(0,0,0, .2);
		}
	}
}
